import { type IAuthenticationService } from '../interfaces/iAuthenticationService';
import { type KeycloakJwtToken } from '../interfaces/iKeycloackJwtToken';
import { type KeycloakAuthToken } from '../interfaces/iKeycloakAuthToken';
import { type TazamaToken } from '../interfaces/iTazamaToken';
export declare class KeycloakService implements IAuthenticationService {
    realm: string;
    baseUrl: string;
    constructor();
    /**
     * Authenticates with the provided username and password via KeyCloak to get a KeyCloak token
     * Generates a TazamaToken from the KeyCloak Token with added claims
     *
     * @param {string} username - The username for authentication.
     * @param {string} password - The password for authentication.
     * @returns {Promise<string>} - A promise that resolves to a signed JWT token.
    */
    getToken(username: string, password: string): Promise<string>;
    /**
     * Decodes the given Keycloak authentication token and maps out the associated claims.
     *
     * @param {KeycloakAuthToken} authToken - The Keycloak authentication token to decode.
     * @returns {Promise<TazamaToken>} - A promise that resolves to a TazamaToken object containing the mapped claims.
    */
    generateTazamaToken(authToken: KeycloakAuthToken): Promise<TazamaToken>;
    /**
     * Extracts and maps the claims from the decoded Keycloak JWT token.
     *
     * @param {KeycloakJwtToken} decodedToken - The decoded JWT token from Keycloak.
     * @returns {string[]} - An array of privileges extracted from the decoded token.
    */
    mapTazamaRoles(decodedToken: KeycloakJwtToken): string[];
}
